#include "Header.h"
#include <iostream>
#include <sstream>
#include <string>
#include <map>
#include <vector>
template <class T>

class PriorQueue {
	std::vector<T> data;
	bool changeVal(T &father, T &son) {
		if (son < father) {
			std::swap(son, father);
			return true;
		}
		return false;
	}
public:
	void push(const T &val) {
		data.push_back(val);
		int i = data.size() - 1;
		while (i > 0) {
			int j = (i - 1) / 2;
			if (!changeVal(data[j], data[i]))
				break;
			i = j;
		}
	}
	T &top() {
		return data[0];
	}
	void pop() {
		data[0] = data[data.size() - 1];
		data.pop_back();
		int i = 0;
		while (i < ((data.size() - 1) / 2)) {
			int j = data[2 * i + 1] < data[2 * i + 2] ? (2 * i + 1) : (2 * i + 2);
			if (!changeVal(data[i], data[j]))
				break;
			i = j;
		}
	}
};

enum constants {
	add, get, del
};

using namespace std;
int main()
{
	const map<string, constants> comands = { { "add", constants::add },{ "get", constants::get },{ "del", constants::del } };
	int n;
	cin >> n;
	string line, word;
	PriorQueue<int> que;
	cin.get();
	for (int i = 0; i < n; ++i) {
		getline(cin, line);
		istringstream ss(line);
		ss >> word;
		try {
			switch (comands.at(word)) {
			case constants::add:
				int value;
				ss >> value;
				que.push(value);
				break;
			case constants::get:
				try {
					cout << que.top() << endl;
				}
				catch (...) {
					cout << "Stack is empty" << endl;
				}
				break;
			case constants::del:
				que.pop();
				break;
			}
		}
		catch (...) {
			cout << "Unknown command" << endl;
		}
	}

	return 0;
}
